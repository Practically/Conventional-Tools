image: node:10

stages:
  - lint
  - build
  - package
  - release
  - deploy

cache:
  paths:
    - node_moduels/

before_script:
  - yarn install

lint:commits:
  stage: lint
  script:
    - ./bin/run commitlint

build:
  stage: build
  script:
    - apt update && apt install -y p7zip-full
    - yarn build -t linux-x64
    - rm dist/**/*linux-x64.tar.gz
  artifacts:
    paths:
      - dist
  only:
    - master
    - next
    - tags

docker-image-next:
  stage: package
  image: docker
  dependencies:
    - build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
    - docker build --pull --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - next

release:
  stage: release
  dependencies:
    - build
  variables:
    GIT_EMAIL: gitbot@baln.co.uk
    GIT_USER: Gitbot
    GIT_STRATEGY: clone
  script:
    - git config --global user.email "$GIT_EMAIL"
    - git config --global user.name "$GIT_USER"
    - git checkout $CI_COMMIT_BRANCH
    - ./bin/run release-semver
  only:
    - master

docker-image:
  stage: package
  image: docker
  dependencies:
    - build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --pull --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - tags

publish:npm:
  stage: package
  script:
    - cp "$NPM_RC" ~/.npmrc
    - yarn prepack
    - npm publish --access=public
  only:
    - tags

pages:
  stage: deploy
  script:
    - npm install -g docpress
    - docpress build
  artifacts:
    paths:
      - public
  only:
    - tags

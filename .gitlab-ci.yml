image: node:12

stages:
  - lint
  - test
  - build
  - package
  - release
  - deploy

cache:
  paths:
    - node_moduels/

before_script:
  - yarn install

lint:commits:
  stage: lint
  rules:
    - if: '$CRON != "true"'
  script:
    - ./bin/run commitlint

test:
  stage: test
  rules:
    - if: '$CRON != "true"'
  script:
    - ln -s $(pwd)/bin/run /usr/local/bin/conventional-tools
    - git config --global user.email "test@test.com"
    - git config --global user.name "Tester"
    - yarn prepack
    - TEST_OUTPUT=1 yarn test

lint:code:
  stage: lint
  rules:
    - if: '$CRON != "true"'
  script:
    - ./node_modules/.bin/prettier -c src/**/* docs/**/*

build:
  stage: build
  script:
    - apt update && apt install -y p7zip-full
    - yarn build -t linux-x64
    - rm dist/**/*linux-x64.tar.gz
  artifacts:
    paths:
      - dist
  only:
    - 0.x

docker-image-next:
  stage: package
  image: docker
  dependencies:
    - build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
    - docker build --pull --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - 0.x

release:
  stage: release
  dependencies:
    - build
  variables:
    GIT_EMAIL: gitbot@baln.co.uk
    GIT_USER: Gitbot
    GIT_STRATEGY: clone
  script:
    - git config --global user.email "$GIT_EMAIL"
    - git config --global user.name "$GIT_USER"
    - git checkout $CI_COMMIT_BRANCH
    - ./bin/run release-semver
  only:
    - master

docker-image:
  stage: package
  image: docker
  dependencies:
    - build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --pull --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

publish:npm:
  stage: package
  script:
    - cp "$NPM_RC" ~/.npmrc
    - yarn prepack
    - npm publish --access=public
  only:
    - master

deploy:docs:
  stage: deploy
  image: python:latest
  cache: {}
  variables:
    RSYNC_HOST: $DOCS_SSH_DEPLOYMENT_HOST
    RSYNC_PORT: $DOCS_SSH_DEPLOYMENT_PORT
    RSYNC_USER: $DOCS_SSH_DEPLOYMENT_USER
    RSYNC_KEY: $DOCS_SSH_DEPLOYMENT_KEY
    RSYNC_DEST: $DOCS_SSH_DEPLOYMENT_DEST
    RSYNC_SRC: public/
  script:
    #
    # Check the environment
    #
    - if [[ -z "$RSYNC_DEST" ]]; then echo "ERROR No destination was specified" && exit 1; fi
    #
    # Install dependencies
    #
    - pip install mkdocs-material
    - apt-get update && apt-get install -y rsync
    #
    # Build site
    #
    - mkdocs build --site-dir public
    #
    # Set up ssh
    #
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - eval $(ssh-agent -s)
    - ssh-keyscan -p "$RSYNC_PORT" "$RSYNC_HOST" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "$RSYNC_KEY" | tr -d '\r' | ssh-add -
    #
    # Run the rsync deployment
    #
    - rsync -arvph $RSYNC_SRC -e "ssh -p $RSYNC_PORT" $RSYNC_USER@$RSYNC_HOST:$RSYNC_DEST
  only:
    refs:
      - 0.x

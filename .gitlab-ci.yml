# Copyright 2020-2022 Practically.io All rights reserved
stages: ['test', 'build', 'package', 'deploy']

commits:
  stage: test
  image: node:16
  cache:
    paths:
      - node_modules
  script:
    - yarn install && yarn prepack
    - rm -rf node_modules && NODE_ENV=production yarn install

    - ./bin/run commitlint

prettier:
  stage: test
  image: node:16
  cache:
    paths:
      - node_modules
  script:
    - yarn install
    - ./node_modules/.bin/prettier -c "./src/**/*.{js,jsx,ts,tsx,json,md,css}" "./test/**/*.{js,jsx,ts,tsx,json,md,css}" "./docs/**/*.{js,jsx,ts,tsx,json,md,css}"

.test_template: &test_configuration
  stage: test
  cache:
    paths:
      - node_modules
  script:
    - yarn install
    - ln -s $(pwd)/bin/run /usr/local/bin/conventional-tools
    - git config --global user.email "test@test.com"
    - git config --global user.name "Tester"
    - yarn prepack
    - TEST_OUTPUT=1 yarn test

test:node:14:
  <<: *test_configuration
  image: node:14

test:node:16:
  <<: *test_configuration
  image: node:16

test:node:18:
  <<: *test_configuration
  image: node:18

build:
  stage: build
  image: node:16
  cache:
    paths:
      - node_modules
  script:
    - apt update && apt install -y p7zip-full
    - yarn install
    - yarn build -t linux-x64
    - rm dist/**/*linux-x64.tar.gz
  artifacts:
    paths:
      - dist
  only:
    - 0.x
    - 1.x

docker-image-next:
  stage: package
  image: docker
  dependencies:
    - build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
    - docker build --pull --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - 0.x
    - 1.x

deploy:docs:
  stage: deploy
  image: python:latest
  variables:
    RSYNC_HOST: $DOCS_SSH_DEPLOYMENT_HOST
    RSYNC_PORT: $DOCS_SSH_DEPLOYMENT_PORT
    RSYNC_USER: $DOCS_SSH_DEPLOYMENT_USER
    RSYNC_KEY: $DOCS_SSH_DEPLOYMENT_KEY
    RSYNC_DEST: $DOCS_SSH_DEPLOYMENT_DEST
    RSYNC_SRC: public/
  script:
    #
    # Check the environment
    #
    - if [[ -z "$RSYNC_DEST" ]]; then echo "ERROR No destination was specified" && exit 1; fi
    #
    # Install dependencies
    #
    - pip install mkdocs-material
    - apt-get update && apt-get install -y rsync
    #
    # Build site
    #
    - mkdocs build --site-dir public
    #
    # Set up ssh
    #
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - eval $(ssh-agent -s)
    - ssh-keyscan -p "$RSYNC_PORT" "$RSYNC_HOST" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "$RSYNC_KEY" | tr -d '\r' | ssh-add -
    #
    # Run the rsync deployment
    #
    - rsync -arvph $RSYNC_SRC -e "ssh -p $RSYNC_PORT" $RSYNC_USER@$RSYNC_HOST:$RSYNC_DEST
  only:
    refs:
      - 1.x
